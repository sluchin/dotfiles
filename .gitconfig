[user]
    email = higashit@itec-hokkaido.co.jp
    name = Tetsuya Higashi

[core]
    excludesfile = ~/.gitignore
	editor = emacsclient
	pager = lv -c -Iu

[color]
    ui = auto

[alias]
	co = checkout
	ci = commit
    cp = cherry-pick
    ad = add
    st = status
    sh = show
    so = remote show origin
    ft = fetch
    unstage = reset HEAD --

    log-graph = log --graph --all --date-order -C -M --pretty='format:%C(yellow)%h %C(green)%cd %C(blue)%an%C(red)%d %C(reset)%s' --all --date=short
    log-oneline = log --no-merges --date=short --pretty='format:%C(yellow)%h %C(green)%cd %C(blue)%an%C(red)%d %C(reset)%s'
    log-changed = whatchanged  # logに変更されたファイルも一緒に出す
    log-stat = log --stat      # logに変更されたファイルも一緒に出す
    log-diff = log -p          # diffも一緒に出す
    log-origin = log origin    # originのlog
    log-ranking = shortlog -s -n --no-merges

    br = branch
    ba = branch -a           # originも含めた全てのbranchを表示
    bm = branch --merged     # merge済みのbranchを表示
    bn = branch --no-merged  # mergeしてないbranchを表示

    dm = diff master           # masterとのdiff
    dw = diff --color-words    # 単語単位でいろつけてdiff
    dc = diff --cached         # addされているものとのdiff
    ds = diff --staged         # 同上(1.6.1移行)
    d1 = diff HEAD~            # HEADから1つ前とdiff
    d2 = diff HEAD~~           # HEADから2つ前とdiff
    d3 = diff HEAD~~~          # HEADから3つ前とdiff
    d4 = diff HEAD~~~~         # HEADから4つ前とdiff
    d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
    d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff

    up = pull --rebase       # pull rebase
    rbm = rebase master      # masterへのrebaseはよく使うのでalias
    cam = commit -a --amend  # 直前のcommitを修正

    gr = grep
    gn = grep -n

    # conflict が起きたファイルを編集
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; emacsclient `f`"

    # conflict が起きたファイルを add
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
