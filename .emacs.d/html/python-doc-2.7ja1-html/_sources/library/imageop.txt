
:mod:`imageop` --- 生の画像データを操作する
===========================================

.. module:: imageop
   :synopsis: 生の画像データを操作する。
   :deprecated:

.. deprecated:: 2.6
    :mod:`imageop` モジュールは Python 3.0 では削除されます。


:mod:`imageop` モジュールは画像に関する便利な演算がふくまれています。Python文字列に保存されている8または32ビットのピクセルから構成される画像を操作します。これは :func:`gl.lrectwrite` と :mod:`imgfile` モジュールが使用しているものと同じフォーマットです。

モジュールは次の変数と関数を定義しています:


.. exception:: error

   この例外はピクセル当りの未知のビット数などのすべてのエラーで発生させられます。


.. function:: crop(image, psize, width, height, x0, y0, x1, y1)

   *image* の選択された部分を返します。
   *image* は *width* × *height* の大きさで、 *psize* バイトのピクセルから構成されなければなりません。
   *x0*, *y0*, *x1* および *y1* は :func:`gl.lrectread` パラメータと同様です。
   すなわち、境界は新画像に含まれます。新しい境界は画像の内部である必要はありません。
   旧画像の外側になるピクセルは値をゼロに設定されます。
   *x0* が *x1* より大きければ、新画像は鏡像反転されます。y軸についても同じことが適用されます。


.. function:: scale(image, psize, width, height, newwidth, newheight)

   *image* を大きさ *newwidth* × *newheight* に伸縮させて返します。補間は行われません。ばかばかしいほど単純なピクセルの複製と間引きを行い伸縮させます。そのため、コンピュータで作った画像やディザ処理された画像は伸縮した後見た目が良くありません。


.. function:: tovideo(image, psize, width, height)

   垂直ローパスフィルタ処理を画像全体に行います。それぞれの目標ピクセルを垂直に並んだ二つの元ピクセルから計算することで行います。このルーチンの主な用途としては、画像がインターレース走査のビデオ装置に表示された場合に極端なちらつきを抑えるために用います。そのため、この名前があります。


.. function:: grey2mono(image, width, height, threshold)

   全ピクセルを二値化することによって、深さ8ビットのグレースケール画像を深さ1ビットの画像へ変換します。処理後の画像は隙間なく詰め込まれ、おそらく :func:`mono2grey` の引数としてしか使い道がないでしょう。


.. function:: dither2mono(image, width, height)

   (ばかばかしいほど単純な)ディザ処理アルゴリズムを用いて、8ビットグレースケール画像を1ビットのモノクロ画像に変換します。


.. function:: mono2grey(image, width, height, p0, p1)

   1ビットモノクロが象画像を8ビットのグレースケールまたはカラー画像に変換します。入力で値ゼロの全てのピクセルは出力では値 *p0* を取り、値0の入力ピクセルは出力では値 *p1* を取ります。白黒のモノクロ画像をグレースケールへ変換するためには、値 ``0`` と ``255`` をそれぞれ渡してください。


.. function:: grey2grey4(image, width, height)

   ディザ処理を行わずに、8ビットグレースケール画像を4ビットグレースケール画像へ変換します。


.. function:: grey2grey2(image, width, height)

   ディザ処理を行わずに、8ビットグレースケール画像を2ビットグレースケール画像に変換します。


.. function:: dither2grey2(image, width, height)

   ディザ処理を行い、8ビットグレースケール画像を2ビットグレースケール画像へ変換します。 :func:`dither2mono` については、ディザ処理アルゴリズムは現在とても単純です。


.. function:: grey42grey(image, width, height)

   4ビットグレースケール画像を8ビットグレースケール画像へ変換します。


.. function:: grey22grey(image, width, height)

   2ビットグレースケール画像を8ビットグレースケール画像へ変換します。


.. data:: backward_compatible

   0 にセットすると、このモジュールの関数は、リトルエンディアンのシステムで以前のバージョンと互換性のない方法でマルチバイトピクセル値を表現
   するようになります。このモジュールはもともと SGI 向けに書かれたのですが、SGI はビッグエンディアンのシステムであり、この変数を設定しても
   何の影響もありません。とはいえ、このコードはもともとどこでも動作するように考えて作られたわけではないので、バイトオーダに関する
   仮定が相互利用向けではありませんでした。この変数を 0 にすると、リトルエンディアンのシステムではバイトオーダを反転して、ビッグエンディアンと同じにします。

